/* ----------------------------------------------------------------------------
 * This file was automatically generated by io-js-autogen Version 0.0.1
 *
 * Do not make changes to this file unless you know what you are doing--modify the
 * C header file instead.
 * ----------------------------------------------------------------------------- */
#include "edi_robot_addon.h"
#include "stdlib.h"
#include "string.h"
#include "_globalvar.h"

using namespace v8;


// 25: extern int screenInit ( screenConfig config ) ;
Handle<Value> screenInitV8(const Arguments &args) {
    HandleScope scope;
    
    // Convert V8 parameters to C++
    
    V8_ASSERT(args[0]->IsObject(), "args[0] parameters error!");
    Local<Value> args0_refreshFreq = args[0]->ToObject()->Get(String::New("refreshFreq"));
    V8_ASSERT(!args0_refreshFreq->IsNull() && args0_refreshFreq->IsInt32(), "arg0.refreshFreq parameter error");
    int arg0_refreshFreq = (int)args0_refreshFreq->IntegerValue();
    
    screenConfig arg0;
    arg0.refreshFreq = arg0_refreshFreq;
    
        
    // Call C++ function
    int ret = (int)screenInit(arg0);
    
    
    
    // Convert C++ return value to V8
    Handle<Value> retV8 = Int32::New(ret);
    
    return scope.Close(retV8);
    
}
// 26: extern int screenRelease ( ) ;
Handle<Value> screenReleaseV8(const Arguments &args) {
    HandleScope scope;
        
    // Call C++ function
    int ret = (int)screenRelease();
    
    
    
    // Convert C++ return value to V8
    Handle<Value> retV8 = Int32::New(ret);
    
    return scope.Close(retV8);
    
}
// 27: extern int screenOnData ( int faceId ) ;
Handle<Value> screenOnDataV8(const Arguments &args) {
    HandleScope scope;
    
    // Convert V8 parameters to C++
    
    V8_ASSERT(args[0]->IsInt32(), "args[0] parameters error!");
    int arg0 = (int)args[0]->IntegerValue();
    
        
    // Call C++ function
    int ret = (int)screenOnData(arg0);
    
    
    
    // Convert C++ return value to V8
    Handle<Value> retV8 = Int32::New(ret);
    
    return scope.Close(retV8);
    
}
static void SetMemberFunc(Handle<Object> obj) {
    obj->Set(v8::String::NewSymbol("screenInit"),
           FunctionTemplate::New(screenInitV8)->GetFunction());

    obj->Set(v8::String::NewSymbol("screenRelease"),
           FunctionTemplate::New(screenReleaseV8)->GetFunction());

    obj->Set(v8::String::NewSymbol("screenOnData"),
           FunctionTemplate::New(screenOnDataV8)->GetFunction());
}


// Const defined by macros
static void SetConst(Handle<Object> obj) {

    obj->Set(v8::String::NewSymbol("ERR_NONE"),
             Int32::New(0));

    obj->Set(v8::String::NewSymbol("ERR_UNKOWN"),
             Int32::New(-1));

    obj->Set(v8::String::NewSymbol("screenClass"),
             v8::String::New("edi_robot"));

    obj->Set(v8::String::NewSymbol("screenConfig_refreshFreq"),
             Int32::New(10));

}

// Const defined by enumeration
static void SetEnumConst(Handle<Object> obj) {

}
static void SetGlobalVarFunc(Handle<Object> obj) {
}

void Initedi_robot(Handle<Object> exports) {

    SetMemberFunc(exports);

    SetConst(exports);

    SetEnumConst(exports);

    SetGlobalVarFunc(exports);
}
