/* ----------------------------------------------------------------------------
 * This file was automatically generated by io-js-autogen Version 0.0.1
 *
 * Do not make changes to this file unless you know what you are doing--modify the
 * C header file instead.
 * ----------------------------------------------------------------------------- */
#include "indoor_kit_addon.h"
#include "stdlib.h"
#include "string.h"
#include "_globalvar.h"

using namespace v8;


// 26: extern int rotaryEncoderInit ( rotaryEncoderConfig config , rotaryEncoderDegreeCb degCb , rotaryEncoderThreCb threCb ) ;
Handle<Value> rotaryEncoderInitV8(const Arguments &args) {
    HandleScope scope;
    
    // Convert V8 parameters to C++
    
    V8_ASSERT(args[0]->IsObject(), "args[0] parameters error!");
    Local<Value> args0_pinA = args[0]->ToObject()->Get(String::New("pinA"));
    V8_ASSERT(!args0_pinA->IsNull() && args0_pinA->IsInt32(), "arg0.pinA parameter error");
    int arg0_pinA = (int)args0_pinA->IntegerValue();
    
    Local<Value> args0_pinB = args[0]->ToObject()->Get(String::New("pinB"));
    V8_ASSERT(!args0_pinB->IsNull() && args0_pinB->IsInt32(), "arg0.pinB parameter error");
    int arg0_pinB = (int)args0_pinB->IntegerValue();
    
    Local<Value> args0_interval = args[0]->ToObject()->Get(String::New("interval"));
    V8_ASSERT(!args0_interval->IsNull() && args0_interval->IsInt32(), "arg0.interval parameter error");
    int arg0_interval = (int)args0_interval->IntegerValue();
    
    Local<Value> args0_threshold = args[0]->ToObject()->Get(String::New("threshold"));
    V8_ASSERT(!args0_threshold->IsNull() && args0_threshold->IsInt32(), "arg0.threshold parameter error");
    int arg0_threshold = (int)args0_threshold->IntegerValue();
    
    rotaryEncoderConfig arg0;
    arg0.pinA = arg0_pinA;
    arg0.pinB = arg0_pinB;
    arg0.interval = arg0_interval;
    arg0.threshold = arg0_threshold;
    
    
    V8_ASSERT(args[1]->IsFunction(), "args[1] parameters error!");
    cbArray[0] = Persistent<Function>::New(Local<Function>::Cast(args[1]));
    rotaryEncoderDegreeCb arg1;;
    arg1 = cbFunc0;
    
    
    V8_ASSERT(args[2]->IsFunction(), "args[2] parameters error!");
    cbArray[1] = Persistent<Function>::New(Local<Function>::Cast(args[2]));
    rotaryEncoderThreCb arg2;;
    arg2 = cbFunc1;
    
        
    // Call C++ function
    int ret = (int)rotaryEncoderInit(arg0, arg1, arg2);
    
    
    
    // Convert C++ return value to V8
    Handle<Value> retV8 = Int32::New(ret);
    
    return scope.Close(retV8);
    
}
// 27: extern int rotaryEncoderRelease ( ) ;
Handle<Value> rotaryEncoderReleaseV8(const Arguments &args) {
    HandleScope scope;
        
    // Call C++ function
    int ret = (int)rotaryEncoderRelease();
    
    
    
    // Convert C++ return value to V8
    Handle<Value> retV8 = Int32::New(ret);
    
    return scope.Close(retV8);
    
}
// 28: extern int rotaryEncoderOnData ( int toggle ) ;
Handle<Value> rotaryEncoderOnDataV8(const Arguments &args) {
    HandleScope scope;
    
    // Convert V8 parameters to C++
    
    V8_ASSERT(args[0]->IsInt32(), "args[0] parameters error!");
    int arg0 = (int)args[0]->IntegerValue();
    
        
    // Call C++ function
    int ret = (int)rotaryEncoderOnData(arg0);
    
    
    
    // Convert C++ return value to V8
    Handle<Value> retV8 = Int32::New(ret);
    
    return scope.Close(retV8);
    
}
static void SetMemberFunc(Handle<Object> obj) {
    obj->Set(v8::String::NewSymbol("rotaryEncoderInit"),
           FunctionTemplate::New(rotaryEncoderInitV8)->GetFunction());

    obj->Set(v8::String::NewSymbol("rotaryEncoderRelease"),
           FunctionTemplate::New(rotaryEncoderReleaseV8)->GetFunction());

    obj->Set(v8::String::NewSymbol("rotaryEncoderOnData"),
           FunctionTemplate::New(rotaryEncoderOnDataV8)->GetFunction());
}


// Const defined by macros
static void SetConst(Handle<Object> obj) {

    obj->Set(v8::String::NewSymbol("ERR_NONE"),
             Int32::New(0));

    obj->Set(v8::String::NewSymbol("ERR_UNKOWN"),
             Int32::New(-1));

    obj->Set(v8::String::NewSymbol("rotaryEncoderClass"),
             v8::String::New("indoor"));

    obj->Set(v8::String::NewSymbol("rotaryEncoderConfig_pinA"),
             Int32::New(2));

    obj->Set(v8::String::NewSymbol("rotaryEncoderConfig_pinB"),
             Int32::New(3));

    obj->Set(v8::String::NewSymbol("rotaryEncoderConfig_interval"),
             Int32::New(300));

    obj->Set(v8::String::NewSymbol("rotaryEncoderConfig_threshold"),
             Int32::New(150));

}

// Const defined by enumeration
static void SetEnumConst(Handle<Object> obj) {

}
static void SetGlobalVarFunc(Handle<Object> obj) {
}

void Initindoor_kit(Handle<Object> exports) {

    SetMemberFunc(exports);

    SetConst(exports);

    SetEnumConst(exports);

    SetGlobalVarFunc(exports);
}
