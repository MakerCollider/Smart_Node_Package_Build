/* ----------------------------------------------------------------------------
 * This file was automatically generated by io-js-autogen Version 0.0.1
 *
 * Do not make changes to this file unless you know what you are doing--modify the
 * C header file instead.
 * ----------------------------------------------------------------------------- */
#include "_globalvar.h"
#include <map>
#include "stdlib.h"

Persistent<Function> cbArray[12];

std::map <void *, Persistent<Object> > CClassToJsObjMap;
std::map <void *, Persistent<Object> >::iterator iter;
Persistent<Object> JSObj;


void cbFunc0(int arg0) {
    HandleScope scope;
    const unsigned argc = 1;
    Local<Value> argv[argc];

    argv[0] = Int32::New(arg0);
    
    cbArray[0]->Call(Context::GetCurrent()->Global(), argc, argv);
    
    

    return;
}

void cbFunc1(int arg0) {
    HandleScope scope;
    const unsigned argc = 1;
    Local<Value> argv[argc];

    argv[0] = Int32::New(arg0);
    
    cbArray[1]->Call(Context::GetCurrent()->Global(), argc, argv);
    
    

    return;
}

void cbFunc2(float arg0) {
    HandleScope scope;
    const unsigned argc = 1;
    Local<Value> argv[argc];

    argv[0] = Number::New(arg0);
    
    cbArray[2]->Call(Context::GetCurrent()->Global(), argc, argv);
    
    

    return;
}

void cbFunc3(int arg0) {
    HandleScope scope;
    const unsigned argc = 1;
    Local<Value> argv[argc];

    argv[0] = Int32::New(arg0);
    
    cbArray[3]->Call(Context::GetCurrent()->Global(), argc, argv);
    
    

    return;
}

void cbFunc4(int arg0) {
    HandleScope scope;
    const unsigned argc = 1;
    Local<Value> argv[argc];

    argv[0] = Int32::New(arg0);
    
    cbArray[4]->Call(Context::GetCurrent()->Global(), argc, argv);
    
    

    return;
}

void cbFunc5(int arg0) {
    HandleScope scope;
    const unsigned argc = 1;
    Local<Value> argv[argc];

    argv[0] = Int32::New(arg0);
    
    cbArray[5]->Call(Context::GetCurrent()->Global(), argc, argv);
    
    

    return;
}

void cbFunc6(int arg0) {
    HandleScope scope;
    const unsigned argc = 1;
    Local<Value> argv[argc];

    argv[0] = Int32::New(arg0);
    
    cbArray[6]->Call(Context::GetCurrent()->Global(), argc, argv);
    
    

    return;
}

void cbFunc7(int arg0) {
    HandleScope scope;
    const unsigned argc = 1;
    Local<Value> argv[argc];

    argv[0] = Int32::New(arg0);
    
    cbArray[7]->Call(Context::GetCurrent()->Global(), argc, argv);
    
    

    return;
}

void cbFunc8(int arg0, int arg1) {
    HandleScope scope;
    const unsigned argc = 2;
    Local<Value> argv[argc];

    argv[0] = Int32::New(arg0);
        argv[1] = Int32::New(arg1);
    
    cbArray[8]->Call(Context::GetCurrent()->Global(), argc, argv);
    
    

    return;
}

void cbFunc9(int arg0) {
    HandleScope scope;
    const unsigned argc = 1;
    Local<Value> argv[argc];

    argv[0] = Int32::New(arg0);
    
    cbArray[9]->Call(Context::GetCurrent()->Global(), argc, argv);
    
    

    return;
}

void cbFunc10(int arg0) {
    HandleScope scope;
    const unsigned argc = 1;
    Local<Value> argv[argc];

    argv[0] = Int32::New(arg0);
    
    cbArray[10]->Call(Context::GetCurrent()->Global(), argc, argv);
    
    

    return;
}

void cbFunc11(int arg0) {
    HandleScope scope;
    const unsigned argc = 1;
    Local<Value> argv[argc];

    argv[0] = Int32::New(arg0);
    
    cbArray[11]->Call(Context::GetCurrent()->Global(), argc, argv);
    
    

    return;
}
