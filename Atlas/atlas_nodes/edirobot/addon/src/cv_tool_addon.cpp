/* ----------------------------------------------------------------------------
 * This file was automatically generated by io-js-autogen Version 0.0.1
 *
 * Do not make changes to this file unless you know what you are doing--modify the
 * C header file instead.
 * ----------------------------------------------------------------------------- */
#include "cv_tool_addon.h"
#include "stdlib.h"
#include "string.h"
#include "_globalvar.h"

using namespace v8;


// 26: extern int fakeCameraInit ( fakeCameraConfig config , fakeCameraCb cb ) ;
Handle<Value> fakeCameraInitV8(const Arguments &args) {
    HandleScope scope;
    
    // Convert V8 parameters to C++
    
    V8_ASSERT(args[0]->IsObject(), "args[0] parameters error!");
    Local<Value> args0_interval = args[0]->ToObject()->Get(String::New("interval"));
    V8_ASSERT(!args0_interval->IsNull() && args0_interval->IsInt32(), "arg0.interval parameter error");
    int arg0_interval = (int)args0_interval->IntegerValue();
    
    Local<Value> args0_imgFile = args[0]->ToObject()->Get(String::New("imgFile"));
    V8_ASSERT(!args0_imgFile->IsNull() && (args0_imgFile->IsString() || args0_imgFile->IsObject()), "arg0.imgFile parameter error");
    char *arg0_imgFile;
    int idx0_1;
    int len0_1;
    if (args0_imgFile->IsString()) {
        v8::String::AsciiValue args0_imgFile_at(args0_imgFile->ToString());
        len0_1 = strlen(*args0_imgFile_at) + 1;
        arg0_imgFile = new char[len0_1];
        strcpy(arg0_imgFile, *args0_imgFile_at);
    } else {
        Local<Array> args0_imgFile_at = Local<Array>::Cast(args0_imgFile);
        len0_1 = args0_imgFile_at->Length() + 1;
        arg0_imgFile = new char[len0_1];
        for (idx0_1 = 0; idx0_1 < len0_1 - 1; idx0_1++) {
            Local<Value> args0_imgFile_a = args0_imgFile_at->Get(idx0_1);
            V8_ASSERT(!args0_imgFile_a->IsNull() && args0_imgFile_a->IsInt32(), "arg0_imgFile[%d] parameter error", idx0_1);
            arg0_imgFile[idx0_1] = (char)args0_imgFile_a->IntegerValue();
        }
        arg0_imgFile[idx0_1] = 0;
    }
    
    Local<Value> args0_width = args[0]->ToObject()->Get(String::New("width"));
    V8_ASSERT(!args0_width->IsNull() && args0_width->IsInt32(), "arg0.width parameter error");
    int arg0_width = (int)args0_width->IntegerValue();
    
    Local<Value> args0_height = args[0]->ToObject()->Get(String::New("height"));
    V8_ASSERT(!args0_height->IsNull() && args0_height->IsInt32(), "arg0.height parameter error");
    int arg0_height = (int)args0_height->IntegerValue();
    
    fakeCameraConfig arg0;
    arg0.interval = arg0_interval;
    arg0.imgFile = new char[sizeof(arg0_imgFile)/sizeof(arg0_imgFile[0])];
    strcpy(arg0.imgFile, arg0_imgFile);
    delete [] arg0_imgFile;
    arg0.width = arg0_width;
    arg0.height = arg0_height;
    
    
    V8_ASSERT(args[1]->IsFunction(), "args[1] parameters error!");
    cbArray[0] = Persistent<Function>::New(Local<Function>::Cast(args[1]));
    fakeCameraCb arg1;;
    arg1 = cbFunc0;
    
        
    // Call C++ function
    int ret = (int)fakeCameraInit(arg0, arg1);
    
    
    
    // Convert C++ return value to V8
    Handle<Value> retV8 = Int32::New(ret);
    
    return scope.Close(retV8);
    
}
// 27: extern int fakeCameraRelease ( ) ;
Handle<Value> fakeCameraReleaseV8(const Arguments &args) {
    HandleScope scope;
        
    // Call C++ function
    int ret = (int)fakeCameraRelease();
    
    
    
    // Convert C++ return value to V8
    Handle<Value> retV8 = Int32::New(ret);
    
    return scope.Close(retV8);
    
}
// 28: extern int fakeCameraOnData ( int toggle ) ;
Handle<Value> fakeCameraOnDataV8(const Arguments &args) {
    HandleScope scope;
    
    // Convert V8 parameters to C++
    
    V8_ASSERT(args[0]->IsInt32(), "args[0] parameters error!");
    int arg0 = (int)args[0]->IntegerValue();
    
        
    // Call C++ function
    int ret = (int)fakeCameraOnData(arg0);
    
    
    
    // Convert C++ return value to V8
    Handle<Value> retV8 = Int32::New(ret);
    
    return scope.Close(retV8);
    
}
static void SetMemberFunc(Handle<Object> obj) {
    obj->Set(v8::String::NewSymbol("fakeCameraInit"),
           FunctionTemplate::New(fakeCameraInitV8)->GetFunction());

    obj->Set(v8::String::NewSymbol("fakeCameraRelease"),
           FunctionTemplate::New(fakeCameraReleaseV8)->GetFunction());

    obj->Set(v8::String::NewSymbol("fakeCameraOnData"),
           FunctionTemplate::New(fakeCameraOnDataV8)->GetFunction());
}


// Const defined by macros
static void SetConst(Handle<Object> obj) {

    obj->Set(v8::String::NewSymbol("fakeCameraClass"),
             v8::String::New("CV"));

    obj->Set(v8::String::NewSymbol("fakeCameraConfig_interval"),
             Int32::New(1000));

    obj->Set(v8::String::NewSymbol("fakeCameraConfig_imgFile"),
             v8::String::New("static.jpg"));

    obj->Set(v8::String::NewSymbol("fakeCameraConfig_width"),
             Int32::New(160));

    obj->Set(v8::String::NewSymbol("fakeCameraConfig_height"),
             Int32::New(120));

}

// Const defined by enumeration
static void SetEnumConst(Handle<Object> obj) {

}
static void SetGlobalVarFunc(Handle<Object> obj) {
}

void Initcv_tool(Handle<Object> exports) {

    SetMemberFunc(exports);

    SetConst(exports);

    SetEnumConst(exports);

    SetGlobalVarFunc(exports);
}
